SELECT * 
FROM `farmers_market.product`;

-- Ques1. Get all the products available in the market

SELECT product_name,product_id
FROM `farmers_market.product`;

-- fetch specific columns from product table, id, name and size

SELECT product_id,product_name,product_size
FROM `farmers_market.product`

--Explore vendor_booth_assignments. List down 10 rows of
-- vendor_booth_assignments displaying the market_date, vendor ID, booth number.

SELECT market_date,vendor_id,booth_number
FROM `farmers_market.vendor_booth_assignments`
LIMIT 10;

----skip 2 records and display next 10 records

SELECT market_date,vendor_id,booth_number
FROM `farmers_market.vendor_booth_assignments`
LIMIT 1000 OFFSET 2;

-- Sort the VBA data by market_date, if market_date is same,sort the rows in descending order of vendor and limit the
-- output to 20 rows

SELECT *
FROM `farmers_market.vendor_booth_assignments`
ORDER BY market_date ASC,vendor_id DESC
LIMIT 20;

-- Ques 5 In the customer purchases, we have quantity and cost per qty
-- separate, query the total amount that the customer has paid along with
-- date, customer id, vendor_id, qty, cost per qty and the total amt.?

SELECT market_date,customer_id,vendor_id,quantity,cost_to_customer_per_qty,ROUND(quantity*cost_to_customer_per_qty,2) AS TOTAL_AMT
FROM `farmers_market.customer_purchases`;


-- We want to merge each customer’s name into a single column that contains the first name, then a space, and then the last name

SELECT *,CONCAT(customer_first_name," ",customer_last_name) AS FULL_NAME
FROM `farmers_market.customer`

--Display the first name and first character of the last name

SELECT *,CONCAT(customer_first_name," ",SUBSTRING(customer_last_name,1,1)) AS FULL_NAME
FROM `farmers_market.customer`;

-- Capitalise (first letter capitalise) the full_name of the customers

SELECT *,UPPER(customer_first_name)
FROM `farmers_market.customer`;

SELECT *,LOWER(customer_first_name) AS LOWER_CASE_NAME
FROM `farmers_market.customer`;

SELECT *,CONCAT(LOWER(SUBSTR(customer_first_name,1,1)),UPPER(SUBSTR(customer_first_name,2)))
FROM `farmers_market.customer`;

-- Filtering - Taking a subset of rows based on a condition
-- Extract all the product names that belong to product category 1

SELECT *
FROM `farmers_market.product`
WHERE product_category_id = 1;

--Print a report of everything the customer_id 4 has ever purchased at the market,and sort this data by date

SELECT *
FROM `farmers_market.customer_purchases`
WHERE customer_id = 4
ORDER BY market_date;

-- Get all the product info for products with product_id between 3 and 8 (not inclusive) or of product_id 10

SELECT *
FROM `farmers_market.product`
WHERE product_id > 3 AND product_id < 8 OR product_id = 10;

SELECT *
FROM `farmers_market.product`
WHERE product_id BETWEEN 4 AND 7 OR product_id = 10;

-- Find the booth assignments for vendor_id 7 for all the dates between April 3, 2019 and May 16, 2019, including the edge dates

SELECT *
FROM `farmers_market.vendor_booth_assignments`
WHERE vendor_id = 7 AND (market_date BETWEEN "2019-04-03" AND "2019-05-16")

-- Return a list of customers with following last names - Diaz, Edwards, Wilson

SELECT *
FROM `farmers_market.customer`
WHERE customer_last_name = "Diaz" or customer_last_name = "Edwards" or customer_last_name = "Wilson" 

SELECT *
FROM `farmers_market.customer`
WHERE customer_last_name IN ("Diaz","Edwards","Wilson") 

-- Get all the product info for products with product_id 1,12,23,15
SELECT *
FROM `farmers_market.product`
WHERE product_id IN (1,12,23,15);

-- Ques - Find all the products which don’t have sizes mentioned

SELECT *
FROM `farmers_market.product`
WHERE TRIM(product_size) = "" OR product_size IS NULL;

--You want to get data about a customer you knew as Jerry but you are not sure if their name is Jeremy or Jeremiah or Jerry

SELECT *
FROM `farmers_market.customer`
WHERE customer_first_name LIKE "Jer%";

-- 1. % - stands for 0 or more characters
-- 2. _ (underscore) - stands for 1 and only 1 character

-- Examples
-- LIKE “a%” - any length string starting with “a”
-- LIKE “%a” - anything length string with ends with “a”
-- LIKE “%em%” - any string with “em” in between, will match “em” also
-- LIKE “a_” - Any string with length 2 and starting from “a”
-- LIKE “a_%” - A string with starts from “a” and at least is 2 character long

-- Question: Analyze purchases made at the market on days when it rained.

SELECT *
FROM `farmers_market.customer_purchases`
WHERE market_date IN (SELECT market_date
FROM `farmers_market.market_date_info`
WHERE market_rain_flag = 1);

SELECT market_date
FROM `farmers_market.market_date_info`
WHERE market_rain_flag = 1;

--  List down all the product details where product_category_name contains “Fresh” in it.

SELECT *
FROM `farmers_market.product`
WHERE product_category_id IN (SELECT product_category_id
FROM `farmers_market.product_category`
WHERE lower(product_category_name) LIKE "%fresh%");

SELECT product_category_id
FROM `farmers_market.product_category`
WHERE lower(product_category_name) LIKE "%fresh%";

-- Find out which vendors primarily sell fresh products and which don’t.
-- IF STATEMENT - check if condition is met IF(CONDITION, value if true, value if false) 

SELECT *,IF(vendor_type LIKE "%Fresh%","Yes","No") as Sells_Fresh
FROM `farmers_market.vendor`;

-- : Put the total cost to customer purchases into bins of -
-- ● under $5.00,
-- ● $5.00–$9.99,
-- ● $10.00–$19.99, or
-- ● $20.00 and over.
# CREATE A NEW COLUMN CALLED AS PRICE_BIN, 4 CATEGORIES

SELECT market_date,customer_id,product_id,quantity,cost_to_customer_per_qty,
ROUND(quantity*cost_to_customer_per_qty,2) AS TOTAL_AMOUNT,
CASE
  WHEN quantity*cost_to_customer_per_qty < 5 THEN "under $5.00"
  WHEN quantity*cost_to_customer_per_qty BETWEEN 5 AND 9.99 THEN "$5.00–$9.99"
  WHEN quantity*cost_to_customer_per_qty BETWEEN 10 AND 19.99 THEN "$10.00–$19.99"
  ELSE "$20.00 and over"
END AS PRICE_BIN
FROM `farmers_market.customer_purchases`;

-- List all the products along with their product category name

SELECT P.*,PC.product_category_name
FROM `farmers_market.product` AS P LEFT JOIN `farmers_market.product_category` AS PC
ON P.product_category_id = PC.product_category_id;

-- Get a list of customers' zip codes for customers who made a purchase on 2019-04-06.

SELECT DISTINCT(C.customer_zip)
FROM `farmers_market.customer_purchases` AS CP INNER JOIN `farmers_market.customer` AS C
ON CP.customer_id = C.customer_id
WHERE CP.market_date = "2019-04-06";

-- Find out the customers who are either new to the market or have deleted their account from the market.

SELECT CP.customer_id,CU.*
FROM `farmers_market.customer_purchases` AS CP FULL OUTER JOIN `farmers_market.customer` AS CU
ON CP.customer_id = CU.customer_id
WHERE CU.customer_id IS NULL OR CP.customer_id IS NULL;


-- Question: Get a list of the customers who made purchases on each market date.

SELECT market_date,customer_id
FROM `farmers_market.customer_purchases`
GROUP BY market_date,customer_id
ORDER BY market_date,customer_id;

-- Question: Count the number of purchases each customer made per market date.

SELECT market_date,customer_id,COUNT(*) AS Num_of_Purch
FROM `farmers_market.customer_purchases`
GROUP BY market_date,customer_id
ORDER BY market_date,customer_id;

SELECT market_date,COUNT(*) AS Num_of_trans
FROM `farmers_market.customer_purchases`
GROUP BY market_date
ORDER BY market_date;


-- Calculate the total quantity purchased by each customer per market_date. 

SELECT market_date,customer_id,SUM(quantity) AS TOTAL_QTY
FROM `farmers_market.customer_purchases`
GROUP BY market_date,customer_id
ORDER BY market_date,customer_id;

-- How many different kinds of products were purchased by each customer on each market date?

SELECT market_date,customer_id,COUNT(product_id) AS DIFF_PRODUCTS
FROM `farmers_market.customer_purchases`
GROUP BY market_date,customer_id
ORDER BY market_date,customer_id;

-- Question: Calculate the total price paid by customer_id 3 per market_date.

SELECT market_date,SUM(quantity*cost_to_customer_per_qty) AS REVENUE
FROM `farmers_market.customer_purchases`
WHERE customer_id = 3
GROUP BY market_date
ORDER BY market_date;

-- Filter out vendors who brought at least 135 items to the farmer’s market over the period - 2019-05-08 and 2019-05-18

SELECT vendor_id,SUM(quantity) AS TOTAL_ITEMS
FROM `farmers_market.vendor_inventory`
WHERE market_date BETWEEN  "2019-05-08" AND "2019-05-18"
GROUP BY vendor_id
HAVING TOTAL_ITEMS >= 135;

-- : Find the average amount spent on each market day. We want to consider only those days
-- where the number of purchases were more than 3 and every single transaction amount must be greater than 5.

SELECT market_date,ROUND(AVG(quantity * cost_to_customer_per_qty),2) AS AVERAGE_SPEND,
COUNT(*) AS NUM_OF_TRANS
FROM `farmers_market.customer_purchases`
WHERE (quantity * cost_to_customer_per_qty) > 5
GROUP BY market_date
HAVING NUM_OF_TRANS > 3;

-- As a farmer, you want to figure out which of your products were above the average price on each market date?

SELECT *
FROM (SELECT *,AVG(original_price) OVER (PARTITION BY market_date) AS AVG_PRICE_ON_DAY
FROM `farmers_market.vendor_inventory`
ORDER BY market_date) AS X
WHERE (X.original_price > X.AVG_PRICE_ON_DAY) AND (X.VENDOR_ID = 8 )

-- Question: Extract the farmer’s products with prices above the market date’s average product cost for vendor id 8?

-- Count how many different products each vendor brought to market on each date and display the count for each row. 

SELECT *,COUNT(product_id) OVER (PARTITION BY market_date,vendor_id) AS VENDOR_PRODUCT_COUNT
FROM `farmers_market.vendor_inventory`
ORDER BY market_date,vendor_id;

-- Q: Rank the products in each vendor’s inventory. Expensive products get a lower rank.

SELECT *
FROM (SELECT *,ROW_NUMBER() OVER (PARTITION BY vendor_id ORDER BY original_price DESC) AS PRICE_RANK
FROM `farmers_market.vendor_inventory`
ORDER BY vendor_id) AS X
WHERE X.PRICE_RANK = 1;

SELECT *,RANK() OVER (PARTITION BY vendor_id ORDER BY original_price DESC) AS PRICE_RANK
FROM `farmers_market.vendor_inventory`
ORDER BY vendor_id;

SELECT *,DENSE_RANK() OVER (PARTITION BY vendor_id ORDER BY original_price DESC) AS PRICE_RANK
FROM `farmers_market.vendor_inventory`
ORDER BY vendor_id;

SELECT *,NTILE(10) OVER (ORDER BY market_date) AS TILE
FROM `farmers_market.vendor_inventory`
ORDER BY TILE, market_date

-- Using the vendor_booth_assignments table in the Farmer’s
-- Market database, display each vendor’s booth assignment for each
-- market_date alongside their previous booth assignments.


SELECT market_date,vendor_id,booth_number,LAG(booth_number,1) OVER (PARTITION BY vendor_id ORDER BY market_date) AS PREVIOS_DAY_BOOTH
FROM `farmers_market.vendor_booth_assignments`
ORDER BY vendor_id;






